using System.Collections.Generic;
using UnityEngine;

// Copyright (C) 2018 Matthew K Wilson

namespace TerrainEngine2D.Lighting
{
    /// <summary>
    /// A light generated by raycasting randomly
    /// </summary>
    public class RaycastLight : MeshLight
    {
        [Header("Raycasting")]
        /// <summary>
        /// The lights field of view angle
        /// </summary>
        [Tooltip("The field of view angle")]
        [Range(0, 360)]
        public float LightAngle = 360;
        /// <summary>
        /// Objects which the light 
        /// </summary>
        [Tooltip("Objects which the light rays can collide with")]
        public LayerMask ObstacleMask;
        /// <summary>
        /// Amount of light that bleeds into the terrain
        /// </summary>
        [Tooltip("Amount of light that bleeds into the terrain")]
        public float EdgeLightBleed = 0;
        /// <summary>
        /// The amount of light rays per degree
        /// </summary>
        [Tooltip("Amount of light rays per degree")]
        public float Resolution = 0.2f;

        /// <summary>
        /// Calculate the light points
        /// </summary>
        protected override void CalculateLighting()
        {
            Vector2 position = transform.position;
            //The number of rays to cast
            int numRays = Mathf.CeilToInt(LightAngle * Resolution) + 1;
            //The angle between consecutive rays 
            float angleStep = LightAngle / numRays;
            //The transforms global rotation
            float globalRotation = transform.eulerAngles.z;
            //The angles of the rays encapsulating the lights field of view (FOV)
            float angleA = (360 - globalRotation) - LightAngle / 2f;
            float angleB = (360 - globalRotation) + LightAngle / 2f;
            if (angleA < 0)
                angleA += 360;
            if (angleB >= 360)
                angleB -= 360;

            Vector2 direction;

            //Shoot a ray to the first point of the lights FOV if the Light Angle is not a complete 360 degrees
            List<float> distances = new List<float>();
            List<Vector2> directions = new List<Vector2>();
            RaycastHit2D hit;
            if (LightAngle != 360)
            {
                direction = AngleToDirection((360 - globalRotation) - LightAngle / 2f, true);
                hit = Physics2D.Raycast(position, direction, LightRadius, ObstacleMask);
                if (hit.collider != null)
                {
                    Debug.DrawRay(transform.position, direction * hit.distance, Color.green);
                    distances.Add(hit.distance);
                    directions.Add(direction);
                }
                else
                {
                    Debug.DrawRay(transform.position, direction * LightRadius, Color.red);
                    distances.Add(LightRadius);
                    directions.Add(direction);
                }
            }

            //Raycast in a clockwise direction around the light's FOV recording the directions of the rays and distance of hit points
            for (int i = 0; i < numRays; i++)
            {
                float angle = (360 - globalRotation) - LightAngle / 2f + angleStep * i;
                direction = AngleToDirection(angle, true);
                RaycastHit2D hit2D = Physics2D.Raycast(position, direction, LightRadius, ObstacleMask);
                if (hit2D.collider != null)
                {
                    Debug.DrawRay(transform.position, direction * hit2D.distance, Color.green);
                    distances.Add(hit2D.distance);
                    directions.Add(direction);
                } else
                {
                    Debug.DrawRay(transform.position, direction * LightRadius, Color.red);
                    distances.Add(LightRadius);
                    directions.Add(direction);
                }
            }

            //Shoot a ray to the last point of the lights FOV if the Light Angle is not a complete 360 degrees
            if (LightAngle != 360)
            {
                direction = AngleToDirection((360 - globalRotation) + LightAngle / 2f, true);
                hit = Physics2D.Raycast(position, direction, LightRadius, ObstacleMask);
                if (hit.collider != null)
                {
                    Debug.DrawRay(transform.position, direction * hit.distance, Color.green);
                    distances.Add(hit.distance);
                    directions.Add(direction);
                }
                else
                {
                    Debug.DrawRay(transform.position, direction * LightRadius, Color.red);
                    distances.Add(LightRadius);
                    directions.Add(direction);
                }
            }

            //Set the light points using the recorded directions and distances
            lightPoints.Clear();
            for (int i = 0; i < distances.Count; i++)
            {
                Vector2 point = transform.InverseTransformPoint(position + directions[i] * distances[i]);
                point += point.normalized * EdgeLightBleed;
                lightPoints.Add(point);
            }
        }

        /// <summary>
        /// Smooth the light mesh points by point averaging
        /// </summary>
        protected override void SmoothPoints()
        {
            List<Vector2> newPoints = new List<Vector2>();

            if (LightAngle == 360)
            {
                for (int i = 0; i < SmoothingIterations; i++)
                {
                    for (int j = 0; j < lightPoints.Count; j++)
                    {
                        Vector2 prev, next, curr = lightPoints[j];
                        if (j == 0)
                            prev = lightPoints[lightPoints.Count - 1];
                        else
                            prev = lightPoints[j - 1];
                        if (j == lightPoints.Count - 1)
                            next = lightPoints[0];
                        else
                            next = lightPoints[j + 1];
                        //If the difference between the previous and next points isn't major
                        if ((next - prev).magnitude < 2f)
                        {
                            Vector2 average = (prev + next) / 2f;
                            Vector2 difference = average - curr;
                            newPoints.Add(curr + difference / 2f);
                        }
                        else
                            newPoints.Add(lightPoints[j]);
                    }

                    for (int j = 0; j < newPoints.Count; j++)
                    {
                        lightPoints[j] = newPoints[j];
                    }
                    newPoints.Clear();
                }
            }
            else
            {
                for (int i = 0; i < SmoothingIterations; i++)
                {
                    newPoints.Add(lightPoints[0]);
                    for (int j = 1; j < lightPoints.Count - 1; j++)
                    {
                        Vector2 curr = lightPoints[j];
                        Vector2 prev = lightPoints[j - 1];
                        Vector2 next = lightPoints[j + 1];
                        //If the difference between the previous and next points isn't major
                        if ((next - prev).magnitude < 2f)
                        {
                            Vector2 average = (prev + next) / 2f;
                            Vector2 difference = average - curr;
                            newPoints.Add(curr + difference / 2f);
                        }
                        else
                            newPoints.Add(lightPoints[j]);
                    }
                    newPoints.Add(lightPoints[lightPoints.Count - 1]);

                    for (int j = 0; j < newPoints.Count; j++)
                    {
                        lightPoints[j] = newPoints[j];
                    }
                    newPoints.Clear();
                }
            }
        }

        /// <summary>
        /// Add the light points to the mesh
        /// </summary>
        protected override void CreateMesh()
        {
            vertices.Add(Vector3.zero);
            uvs.Add(new Vector2(0.5f, 0.5f));
            colors32.Add(LightColor);
            for (int i = 0; i < lightPoints.Count; i++)
            {
                vertices.Add(lightPoints[i]);

                triangles.Add(0);
                triangles.Add(i + 1);
                triangles.Add(i + 2);

                uvs.Add(new Vector2(lightPoints[i].x / (2 * LightRadius) + 0.5f, lightPoints[i].y / (2 * LightRadius) + 0.5f));
                colors32.Add(LightColor);
            }
            if (LightAngle == 360)
            {
                vertices.Add(lightPoints[0]);
                uvs.Add(uvs[1]);
                colors32.Add(LightColor);
            }
            else
            {
                vertices.Add(Vector3.zero);
                uvs.Add(new Vector2(0.5f, 0.5f));
                colors32.Add(LightColor);
            }

            UpdateMesh();
        }
    }
}
